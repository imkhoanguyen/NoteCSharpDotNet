NoteCSharpDotNet

#####View Data###### (Đổ dữ liệu từ controller sang view) ex: Drop down List

#Controller
public IActionResult Create()
{
    IEnumerable<SelectListItem> list = _db.Villas.ToList().Select(x=> new SelectListItem
    {
        Text = x.Name,
        Value = x.Id.ToString()
    });
    ViewData["VillaList"] = list;
    return View();
}

#View
<div class="form-floating py-1 col-12">
   <select asp-for="@Model.VillaId" asp-items="@ViewData["VillaList"] as IEnumerable<SelectListItem>"
       class="form-select border shadow">
       <option disabled selected>--Select Viila--</option>
   </select>
    <label asp-for="VillaId" class="ms-2"></label>
    <span asp-validation-for="VillaId" class="text-danger"></span>
</div>

======================================================================================================

#####View Bag###### (Đổ dữ liệu từ controller sang view) ex: Drop down List

#Controller
public IActionResult Create()
{
    IEnumerable<SelectListItem> list = _db.Villas.ToList().Select(x=> new SelectListItem
    {
        Text = x.Name,
        Value = x.Id.ToString()
    });
    ViewBag.VillaList = list;
    return View();
}

#View
<div class="form-floating py-1 col-12">
    <select asp-for="@Model.VillaId" asp-items="@ViewBag.VillaList" class="form-select border shadow">
       <option disabled selected>--Select Viila--</option>
   </select>
    <label asp-for="VillaId" class="ms-2"></label>
    <span asp-validation-for="VillaId" class="text-danger"></span>
</div>

#####View Bag###### Select in LINQ
-Trả về một obj
Find: query theo khóa chính 
FristOrDefault
-Trả về một list
Where: thêm điều kiện  query vào
ToList()

======================================================================================================

#####Repository Partern & UnitOfWork###### 
Step
1. Create Interface (ex: IVillaRepository)
2. Implement Interface (ex: VillaRepository)
3. Add Dependencies in Program.cs
4. VillaRepository in Action (Controller, IVillaRepository)
5. Generic Repository (Create IRepository ex: public Interface IRepository<T> where T : class {})
6. Implement Interface (Create Repository ex: public class Repository<T> : IRepository<T> where T : class {internal DbSet<T> dbSet; dbSet = _db.Set<T>();}
   - IVillaRepository : IRepository<Villa>
   - VillaRepository : Repository<Villa>, IVillaRepository
7. Implement UnitOfWork (Tại sao lại implement? => Ko implement thì phải add dependencies cho từng repo, project Supermarket là một ví dụ)
   - Create IUnitOfWork
    ex: 
    public interface IUnitOfWork
    {
        IVillaRepository Villa { get; }
    }
   - Create UnitOfWork 
    ex:
    public class UnitOfWork : IUnitOfWork
    {
        private readonly ApplicationDbContext _db;
        public IVillaRepository Villa {get;private set;}
        public UnitOfWork(ApplicationDbContext db)
        {
            _db = db;
            Villa = new VillaRepository(_db);
        }
    }
8. Edit Dependencies
9. UnitOfWork in Action (Controller, IUnitOfWork)
